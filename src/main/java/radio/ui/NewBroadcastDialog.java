package radio.ui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import radio.util.TimeUtil;

import javax.swing.*;
import java.awt.*;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.TextStyle;
import java.util.Locale;

public class NewBroadcastDialog extends JDialog implements ApplicationWindow {

    private JPanel contentPane;
    private JButton buttonOK;
    private JButton buttonCancel;
    private JPanel mainPanel;
    private JPanel buttonPanel;
    private JLabel titleLabel;
    private JPanel contentPanel;
    private JLabel dayLabel;
    private JComboBox dayDropdown;
    private JPanel dayPanel;
    private JPanel startPanel;
    private JLabel startLabel;
    private JComboBox startDropdown;
    private JPanel endPanel;
    private JLabel endLabel;
    private JComboBox endDropdown;

    // For day handling, we have a combobox showing the days
    // of the current week
    private LocalDate[] currentWeek;

    NewBroadcastDialog(PlanningController cont, String programSelected) {
        buildWeek();

        $$$setupUI$$$();
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonOK);

        buttonOK.addActionListener(_e -> onOK(cont, programSelected));
        buttonCancel.addActionListener(_e -> dispose());
    }

    private void buildWeek() {
        java.util.List<LocalDate> remainderWeek = TimeUtil.getRemainderWeek(LocalDate.now());
        int size = remainderWeek.size();
        currentWeek = new LocalDate[size];
        for (int i = 0; i < size; i++) {
            currentWeek[i] = remainderWeek.get(i);
        }
    }

    private void onOK(PlanningController controller, String programSelected) {
        int dayIdx = dayDropdown.getSelectedIndex();
        int startIdx = startDropdown.getSelectedIndex();
        int endIdx = endDropdown.getSelectedIndex();

        if (dayIdx == -1 || startIdx == -1 || endIdx == -1) {
            show("Oops!");
            return;
        }

        if (endIdx <= startIdx) {
            show("End time can't be before start time");
            return;
        }

        LocalDate day = currentWeek[dayIdx];
        LocalDateTime start = LocalDateTime.of(day, LocalTime.of(startIdx, 0));
        LocalDateTime end;

        // End is at 00:00 of the next day
        if (endIdx == 24) {
            end = LocalDateTime.of(day, LocalTime.of(23,59));
        } else {
            end = LocalDateTime.of(day, LocalTime.of(endIdx, 0));
        }

        if (start.isBefore(LocalDateTime.now())) {
            show("Can't schedule for a time in the past!");
            return;
        }

        SwingUtilities.invokeLater(() -> controller.addBroadcastEvent(programSelected, start, end));
        dispose();
    }


    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(buttonPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        buttonPanel.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1, true, false));
        buttonPanel.add(panel1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonOK = new JButton();
        buttonOK.setText("OK");
        panel1.add(buttonOK, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonCancel = new JButton();
        buttonCancel.setText("Cancel");
        panel1.add(buttonCancel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout(0, 0));
        contentPane.add(mainPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        titleLabel = new JLabel();
        titleLabel.setText("Nueva Emisión");
        mainPanel.add(titleLabel, BorderLayout.NORTH);
        contentPanel = new JPanel();
        contentPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        mainPanel.add(contentPanel, BorderLayout.CENTER);
        dayPanel = new JPanel();
        dayPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        contentPanel.add(dayPanel);
        dayLabel = new JLabel();
        dayLabel.setText("Día");
        dayPanel.add(dayLabel);
        dayPanel.add(dayDropdown);
        startPanel = new JPanel();
        startPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        contentPanel.add(startPanel);
        startLabel = new JLabel();
        startLabel.setText("Inicio");
        startPanel.add(startLabel);
        startPanel.add(startDropdown);
        endPanel = new JPanel();
        endPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        contentPanel.add(endPanel);
        endLabel = new JLabel();
        endLabel.setText("Fin");
        endPanel.add(endLabel);
        endPanel.add(endDropdown);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    private void createUIComponents() {
        String[] days = new String[currentWeek.length];
        String[] hours = new String[25];

        Locale locale = TimeUtil.locale;
        int dayOfMonth;
        String dayOfWeek;
        for (int i = 0; i < currentWeek.length; i++) {
            dayOfMonth = currentWeek[i].getDayOfMonth();
            dayOfWeek = currentWeek[i].getDayOfWeek().getDisplayName(TextStyle.FULL, locale);
            days[i] = dayOfWeek + " " + dayOfMonth;
        }

        for (int i = 0; i < 25; i++) {
            hours[i] = String.format("%2s", i).replace(' ', '0');
        }

        dayDropdown = new JComboBox(days);
        startDropdown = new JComboBox(hours);
        endDropdown = new JComboBox(hours);
    }

    @Override
    public JPanel getPanelHandler() {
        return (JPanel) this.$$$getRootComponent$$$();
    }

}
