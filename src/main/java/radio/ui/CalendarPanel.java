package radio.ui;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDate;
import java.time.format.TextStyle;
import java.time.temporal.ChronoUnit;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalField;
import java.time.temporal.WeekFields;
import java.util.*;

public class CalendarPanel implements ApplicationWindow, Observer {
    private DefaultTableModel tableModel;

    private LocalDate firstOfWeek;
    private Locale locale = new Locale("es", "ES");
    private TemporalField weekFieldISO = WeekFields.of(locale).dayOfWeek();

    private JPanel calendarPanel;
    private JTable calendarTable;
    private JButton prevWeek;
    private JButton nextWeek;
    private JLabel currentWeekLabel;
    private JPanel buttonsPanel;
    private JScrollPane holderPane;
    private JButton todayButton;

    CalendarPanel(MainController _cont) {
        firstOfWeek = getFirstOfWeek(LocalDate.now());
        tableModel = new DefaultTableModel();

        // One for every day of the week, plus timetable
        tableModel.setColumnCount(7);
        // One for every hour of the day, plus "all-day"
        tableModel.setRowCount(26);
        $$$setupUI$$$();
        calendarTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        calendarTable.setModel(this.tableModel);
        calendarTable.setAutoCreateColumnsFromModel(false);

        setupCalendar();
        prevWeek.addActionListener(e -> {
            firstOfWeek = firstOfWeek.minus(1, ChronoUnit.WEEKS);
            updateCalendar();
        });

        nextWeek.addActionListener(e -> {
            firstOfWeek = firstOfWeek.plus(1, ChronoUnit.WEEKS);
            updateCalendar();
        });

        todayButton.addActionListener(e -> {
            firstOfWeek = getFirstOfWeek(LocalDate.now());
            updateCalendar();
        });

    }

    private LocalDate getFirstOfWeek(LocalDate from) {
        return from.with(weekFieldISO, 1);
    }

    private void setupCalendar() {
        JTableHeader header = calendarTable.getTableHeader();
        TableColumnModel model = header.getColumnModel();
        TableColumn tc = model.getColumn(0);
        tc.setHeaderValue("Horario");
        for (int i = 1; i < tableModel.getRowCount(); i++) {
            tableModel.setValueAt(String.format("%02d", (i - 1) % 24) + ":00", i, 0);
        }

        updateCalendar();
    }

    private void updateCalendar() {
        int year = firstOfWeek.getYear();
        String dayOfWeek = firstOfWeek.getDayOfWeek().getDisplayName(TextStyle.SHORT, locale);
        String month = firstOfWeek.getMonth().getDisplayName(TextStyle.FULL, locale);
        int dayOfMonth = firstOfWeek.getDayOfMonth();

        currentWeekLabel.setText(month + " " + year);
        JTableHeader header = calendarTable.getTableHeader();
        TableColumnModel model = header.getColumnModel();

        TableColumn tc = model.getColumn(1);
        tc.setHeaderValue(dayOfWeek + " " + dayOfMonth);
        for (int i = 2; i < 7; i++) {
            LocalDate next = firstOfWeek.plus(i, ChronoUnit.DAYS);
            dayOfMonth = next.getDayOfMonth();
            dayOfWeek = next.getDayOfWeek().getDisplayName(TextStyle.SHORT, locale);
            tc = model.getColumn(i);
            tc.setHeaderValue(dayOfWeek + " " + dayOfMonth);
        }
        header.repaint();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        calendarPanel = new JPanel();
        calendarPanel.setLayout(new BorderLayout(0, 0));
        holderPane = new JScrollPane();
        calendarPanel.add(holderPane, BorderLayout.CENTER);
        calendarTable = new JTable();
        calendarTable.setEnabled(false);
        calendarTable.setFillsViewportHeight(false);
        holderPane.setViewportView(calendarTable);
        buttonsPanel = new JPanel();
        buttonsPanel.setLayout(new BorderLayout(0, 0));
        calendarPanel.add(buttonsPanel, BorderLayout.NORTH);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        buttonsPanel.add(panel1, BorderLayout.CENTER);
        currentWeekLabel = new JLabel();
        currentWeekLabel.setHorizontalAlignment(2);
        currentWeekLabel.setText("Label");
        currentWeekLabel.setToolTipText("Current Month");
        panel1.add(currentWeekLabel, BorderLayout.CENTER);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        panel1.add(panel2, BorderLayout.EAST);
        prevWeek = new JButton();
        prevWeek.setText("←");
        prevWeek.setToolTipText("Go to previous week");
        panel2.add(prevWeek);
        todayButton = new JButton();
        todayButton.setText("Today");
        todayButton.setToolTipText("Go to current week");
        panel2.add(todayButton);
        nextWeek = new JButton();
        nextWeek.setText("→");
        nextWeek.setToolTipText("Go to next week");
        panel2.add(nextWeek);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return calendarPanel;
    }

    @Override
    public JPanel getPanelHandler() {
        return (JPanel) this.$$$getRootComponent$$$();
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }

    @Override
    public void update(Observable o, Object arg) {

    }
}
